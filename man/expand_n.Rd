% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/expand_n.R
\name{expand_n}
\alias{expand_n}
\title{Iteratively fetch additional knowledge graph edges connected to a query graph}
\usage{
expand_n(
  graph,
  return_each = FALSE,
  direction = "both",
  predicates = NULL,
  categories = NULL,
  drop_unused_query_nodes = FALSE,
  n = 1,
  ...
)
}
\arguments{
\item{graph}{A query \code{tbl_kgx()} graph ot query with.}

\item{return_each}{If TRUE, return a list of graphs for each iteration.
If FALSE, return the final graph with all expanded edges.}

\item{direction}{The direction of associations to fetch. Can be "in", "out", or "both". Default is "both".}

\item{predicates}{A vector of relationship predicates (nodes in g are subjects in the KG), indicating which edges to consider in the neighborhood. If NULL (default), all edges are considered.}

\item{categories}{A vector of node categories, indicating which nodes in the larger KG may be fetched. If NULL (default), all nodes in the larger KG are will be fetched.}

\item{drop_unused_query_nodes}{If TRUE, remove query nodes from the result, unless they are at the neighborhood boundary, i.e., required for connecting to the result nodes. Default is FALSE.}

\item{n}{Number of expansion iterations to run.}

\item{...}{Other parameters passed to methods.}

\item{transitive}{NULL (not used in this function).}
}
\value{
A \code{tbl_kgx()} graph
}
\description{
Given an initialized \link{tbl_kgx} graph, iteratively expand the graph
\code{n} iterations using certain predicates/categories.
Arguments can either be a single value or a list of values.
If an argument is provided as a list, its length must be equal to the number
of iterations (\code{n}).
}
\examples{
## Using example KGX file packaged with monarchr
filename <- system.file("extdata", "eds_marfan_kg.tar.gz", package = "monarchr")
g <- file_engine(filename) |>
          fetch_nodes(query_ids = "MONDO:0007525") |>
          expand(predicates = "biolink:has_phenotype",
                 categories = "biolink:PhenotypicFeature")
g_expanded <- g |>
              expand_n(predicates = "biolink:subclass_of", n=3)
}
